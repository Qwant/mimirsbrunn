stages:
  - lint
  - test
  - build
  - trivy
  - development
  - integration
  - production

variables:
  CARGO_HOME: "$CI_PROJECT_DIR/.cargo"
  GIT_SUBMODULE_STRATEGY: recursive

.lint:
  stage: lint
  image: rust:1.68
  tags:
    - k8s

format:
  extends: .lint
  before_script:
    - source ci/bootstrap.sh
    - rustup component add rustfmt
  script:
    - cargo fmt --all -- --check

lint:
  extends: .lint
  variables:
    KUBERNETES_CPU_REQUEST: 2
    KUBERNETES_MEMORY_REQUEST: 2Gi
  before_script:
    - source ci/bootstrap.sh
    - rustup component add clippy
  script:
    - cargo clippy --all -- --allow clippy::multiple_crate_versions --deny warnings
#  cache:
#    key:
#      files:
#        - Cargo.lock
#    paths:
#      - $CI_PROJECT_DIR/target

test:
  stage: test
  image: rust:1.68
  services:
    - name: "docker.elastic.co/elasticsearch/elasticsearch:7.13.0"
      alias: "elasticsearch"
      command: ["bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node"]
  variables:
    CARGO_BUILD_JOBS: 8
    MIMIR_TEST_DOCKER__ENABLE: 'false'
    MIMIR_TEST_ELASTICSEARCH__URL: 'http://elasticsearch:9200'
    KUBERNETES_CPU_REQUEST: 6
    KUBERNETES_MEMORY_LIMIT: 12Gi
    KUBERNETES_MEMORY_REQUEST: 8Gi
  before_script:
    - source ci/bootstrap.sh
  script:
    - cargo test --workspace
#  cache:
#    key:
#      files:
#        - Cargo.lock
#    paths:
#      - $CI_PROJECT_DIR/.cargo/registry/index
#      - $CI_PROJECT_DIR/.cargo/registry/cache
#      - $CI_PROJECT_DIR/target
  tags:
    - k8s

.bragi:
  variables:
    COMPONENT_NAME: "bragi"
.mimirsbrunn:
  variables:
    COMPONENT_NAME: "mimirsbrunn"

.build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.11.0-debug
    entrypoint: ['']
  variables:
    KUBERNETES_CPU_REQUEST: 1
    KUBERNETES_SERVICE_MEMORY_REQUEST: 1Gi
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - source ci/bootstrap.sh
  script:
    - kaniko_build
      --destination $DOCKER_IMAGE
      --digest-file $CI_PROJECT_DIR/docker-content-digest-$COMPONENT_NAME
      --dockerfile $DOCKER_FILE
      --build-arg PROJECT_COMMIT_SHA=$CI_COMMIT_SHA
  artifacts:
    paths:
      - "ci/"
      - "docker-content-digest-$COMPONENT_NAME"
# Note: GitLab cache would break kaniko caching mechanism and would require
#       tons of RAM (more than 16Gi for creating mimirsbrunn)"
#  cache:
#    key:
#      files:
#        - Cargo.lock
#    paths:
#      - $CI_PROJECT_DIR/target
  tags:
    - k8s

build bragi:
  extends:
    - .build
    - .bragi
  variables:
    DOCKER_CONFIG: "$CI_PROJECT_DIR/bragi/.docker"
    DOCKER_FILE: "docker/bragi/Dockerfile"
    DOCKER_IMAGE: "$CI_REGISTRY_IMAGE/bragi:${CI_COMMIT_SHORT_SHA}"
    KUBERNETES_MEMORY_REQUEST: 2Gi

build mimirsbrunn:
  extends:
    - .build
    - .mimirsbrunn
  variables:
    DOCKER_CONFIG: "$CI_PROJECT_DIR/mimirsbrunn/.docker"
    DOCKER_FILE: "docker/mimirsbrunn/Dockerfile"
    DOCKER_IMAGE: "$CI_REGISTRY_IMAGE/mimir:${CI_COMMIT_SHORT_SHA}"
    KUBERNETES_MEMORY_LIMIT: 16Gi
    KUBERNETES_MEMORY_REQUEST: 15Gi

.trivy:
  stage: trivy
  image:
    name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/aquasec/trivy:0.42.1
    entrypoint: [""]
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - source ci/bootstrap.sh
    - export CI_IMAGE_DIGEST="$(cat docker-content-digest-$COMPONENT_NAME)"
  allow_failure: true
  tags:
    - k8s

scan bragi:
  extends:
    - .trivy
    - .bragi
  script:
    - export DOCKER_IMAGE="${CI_REGISTRY_IMAGE}/bragi@${CI_IMAGE_DIGEST}"
    - trivy_image_scan $DOCKER_IMAGE

scan mimirsbrunn:
  extends:
    - .trivy
    - .mimirsbrunn
  script:
    - export DOCKER_IMAGE="${CI_REGISTRY_IMAGE}/mimir@${CI_IMAGE_DIGEST}"
    - trivy_image_scan $DOCKER_IMAGE

.deploy:
  image: registry.qwant.ninja/docker/kubectl:1.19.1
  variables:
    ARGOAPP_REPO_BASEDIR: "deployments"
    ARGOAPP_REPO_URL_SSH: "git@git.qwant.ninja:teams/search-apps/argo_apps.git"
    ARGOCD_APP_ENVIRONMENT: "$CI_ENVIRONMENT_NAME"
    ARGOCD_SERVER: "${ARGOCD_SERVER_C2}"
    ARGOCD_AUTH_TOKEN: "${ARGOCD_AUTH_TOKEN_C2}"
    ARGOCD_OPTS: "--insecure"
  before_script:
    - source ci/bootstrap.sh
  when: manual
  tags:
    - k8s

.deploy:mimir:
  extends: .deploy
  variables:
    ARGOAPP_REPO_PATH: "maps/mimirsbrunn"
    ARGOAPP_REPO_BRANCH: "master"
    ARGOCD_APP_NAME: "mimirsbrunn-${CI_JOB_STAGE}"
    IMAGE_VERSION_FILE: "overlays/${CI_JOB_STAGE}/kustomization.yaml"
  resource_group: "mimir-$CI_JOB_STAGE"
  script:
    - sync-version-argocd
      --docker-image "$CI_COMMIT_SHORT_SHA"
      --image-version-object-path "(.images[] | select(.name == \"$CI_REGISTRY_IMAGE/mimir\") | .newTag)"
    - argocd app sync ${ARGOCD_APP_NAME} --async
    - argocd app wait ${ARGOCD_APP_NAME} --health --sync --timeout 180

.deploy:bragi:
  extends: .deploy
  variables:
    ARGOAPP_REPO_PATH: "maps/bragi"
    ARGOAPP_REPO_BRANCH: "master"
    ARGOCD_APP_NAME: "bragi-${CI_JOB_STAGE}"
    IMAGE_VERSION_FILE: "versions/${CI_JOB_STAGE}.yaml"
  resource_group: "bragi-$CI_JOB_STAGE"
  before_script:
    - source ci/bootstrap.sh
  script:
    - sync-version-argocd
      --docker-image "$CI_REGISTRY_IMAGE/bragi:$CI_COMMIT_SHORT_SHA"
      --image-version-object-path ".image"
    - argocd app sync ${ARGOCD_APP_NAME} --async
    - argocd app wait ${ARGOCD_APP_NAME} --health --sync --timeout 180

#
# Deploy Mimir docker image
#
deploy mimir development:
  stage: development
  extends:
    - .deploy:mimir

deploy mimir integration:
  stage: integration
  extends:
    - .deploy:mimir

deploy mimir production:
  stage: production
  variables:
    ARGOCD_SERVER: "${ARGOCD_SERVER_C4}"
    ARGOCD_AUTH_TOKEN: "${ARGOCD_AUTH_TOKEN_C4}"
  extends:
    - .deploy:mimir

#
# Deploy Bragi docker image
#
deploy bragi development:
  stage: development
  extends:
    - .deploy:bragi

deploy bragi integration:
  stage: integration
  extends:
    - .deploy:bragi

deploy bragi production:
  stage: production
  variables:
    ARGOCD_SERVER: "${ARGOCD_SERVER_C4}"
    ARGOCD_AUTH_TOKEN: "${ARGOCD_AUTH_TOKEN_C4}"
  extends:
    - .deploy:bragi
